
//Geeksforgeeks
class Edge implements Comparable <Edge> {
    int src ,dest , wt;
    
    Edge(int src , int dest , int wt ){
        this.src = src ;
        this.dest = dest;
        this.wt = wt;
    }
    public int compareTo(Edge that){
        return this.wt - that.wt;
    }
}

class Solution
{
    //Function to find sum of weights of edges of the Minimum Spanning Tree
    static int p [] , rank [];
    
    static int find(int x){
        if (p[x] == x){
            return x;
        }
        return find(p[x]);
    }
    static void union(int x , int y){
        int rx = find(x);
        int ry = find(y);
        
        if (rx == ry){
            return;
        }
        p[ry] = rx;
    }
    static int spanningTree(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj) 
    {
        // Add your code here
        
        //KRUSKAL ALGO
        boolean added [] [] = new boolean [V][V];
        ArrayList<Edge> edges = new ArrayList<>();
        for (int i = 0 ; i < adj.size(); i++){
            for(int j = 0 ; j < adj.get(i).size() ; j++){
                 ArrayList<Integer> curr = adj.get(i).get(j);
                if(!added[i][curr.get(0)]) {
                    added[i] [curr.get(0)] = true;
                    added[curr.get(0)][i] = true;
                    edges.add(new Edge(i , curr.get(0) , curr.get(1)));
                }
            }
        }
        
        p = new int [V];
        
        for (int i = 0 ; i < V ; i++){
            p[i] = i;
        }
        Collections.sort(edges);
        
        int count = 1;
        int ans = 0;
        
        for (int i = 0 ; count < V ; i++) {
            Edge edge = edges.get(i);
            int rx = find(edge.src);
            int ry = find(edge.dest);
            
            if (rx != ry) {
                union(rx , ry);
                count++;
                ans += edge.wt;
            }
        }
        return ans;
        
    }
}
