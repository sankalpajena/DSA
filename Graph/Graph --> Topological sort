
//Geeksforgeeks
class Solution
{
    //Function to return list containing vertices in Topological order.
    static void dfs(int node,int vis[],ArrayList<ArrayList<Integer>> adj, Stack<Integer> st)
    {
        vis[node]=1;
        for(Integer itm:adj.get(node))
        {
            if(vis[itm]==0)
            {
                dfs(itm,vis,adj,st);
            }
        }
        st.push(node);
    }
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        // add your code here
        Stack<Integer> st=new Stack<>();
        int vis[]=new int[V];
        for(int i=0;i<V;i++)
        {
            if(vis[i]==0)
            {
                dfs(i,vis,adj,st);
            }
        }
        //Convert arrayList to array 
        int ans[]=new int[V];
        int k=0;
        while(!st.isEmpty())
        {
            ans[k++]=st.pop();
        }
        return ans;
    }
}
 
