//GeekforGeeks

class Solution 
{ 
    //Function to return max value that can be put in knapsack of capacity W.
    static int knapSack(int W, int wt[], int val[], int n) 
    { 
         // your code here 
        int i, w; 
        int K[][] = new int[n+1][W+1]; 
        
        //initialization (recursion base case)
        for( i=0;i<n+1;i++)
        {
            for( w=0;w<W+1;w++)
            {
                if(i==0 || w==0)
                    K[i][w] = 0;
            }
        }
        
        // recursive to iterative (recursion choice diagram) (top-down)
        for (i = 0; i <= n; i++) 
        { 
            for (w = 0; w <= W; w++) 
            { 
                //base case
                if (i==0 || w==0) 
                    K[i][w] = 0; 
                    
                //if weight of current item is more than Knapsack capacity W
                //then this item cannot be included in the optimal solution.
                else if (wt[i-1] <= w) 
                    K[i][w] =Math.max(val[i-1] + K[i-1][w-wt[i-1]], K[i-1][w]); 
                //else updating K[i][w] as K[i-1][w].
                else
                    K[i][w] = K[i-1][w]; 
             } 
        } 
        //returning the result.
        return K[n][W]; 
    } 
}
