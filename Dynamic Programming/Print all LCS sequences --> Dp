//GeeksForGeeks

class Solution
{
    public List<String> all_longest_common_subsequences(String s, String t)
    {
        // Code here
        int m = s.length();
        int n = t.length();
        int[][] dp = new int [m+1][n+1];
        
        for (int i = 0 ; i <= m  ; i++){
            for (int j = 0 ; j <= n  ; j++){
                if (i == 0 || j == 0){
                    dp[i][j] = 0;
                }
            }
        }
        
        for (int i = 1 ; i <= m  ; i++){
            for (int j = 1 ; j <= n ; j++){
                if(s.charAt(i - 1) == t.charAt(j - 1)){
                    dp[i][j] = 1 + dp[i-1][j-1];
                }
                else{
                    dp[i][j] = Math.max(dp[i][j-1] , dp[i-1][j]);
                }
            }
        }
        String str = "";
        ArrayList<String> ans = new ArrayList<>();
        int k = m  , l = n ;
        while(k > 0 && l > 0){
            if(s.charAt(k - 1) == t.charAt(l - 1)){
                str += s.charAt(k - 1);
                ans.add(str);
                k--;
                l--;
            }
            else{
                if(dp[k][l-1] > dp[k-1][l]){
                    l--;
                }
                else{
                    k--;
                }
            }
        }
        Collections.reverse(ans);
        return ans;
    }
}
