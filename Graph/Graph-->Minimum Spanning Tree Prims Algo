
//Geeksforgeeks
//Prims Algorithm
class Pair implements Comparable<Pair> {
    int wt;
    int v;
    Pair(int v , int wt){
        this.v = v;
        this.wt = wt;
    }
    public int compareTo(Pair that){
        return this.wt - that.wt;
    }
}
class Solution
{
    //Function to find sum of weights of edges of the Minimum Spanning Tree.
    static int spanningTree(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj) 
    {
        // Add your code here
        boolean [] vis = new boolean[V];
        PriorityQueue<Pair> q = new PriorityQueue<>();
       //Adding first node source 
        q.add(new Pair(0 , 0));
        int ans = 0;
        //Remove vertex from queue one by one 
        while (q.size() != 0){
            Pair curr = q.remove();
            int u = curr.v;
            //If vertex is visited aleady then skip 
            if(vis[u]){
                continue;
            }
            //Add the weight with answer
            ans += curr.wt;
            //Mark true to the visited vertex
            vis[u] = true;
            ArrayList<ArrayList<Integer>> nbr = adj.get(u);
            //Finding neightbours
            for (ArrayList<Integer> list : nbr){
                int vertex = list.get(0);
                int wt = list.get(1);
                //If neighbour vertex is not visited then add into the queue
                if (vis[vertex] == false){
                    q.add(new Pair(vertex , wt));
                }
            }
        }
        return ans;
    }
}


